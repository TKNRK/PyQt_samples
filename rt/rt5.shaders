# vertex shader
# version 430

uniform mat4 MV;
uniform mat4 P;
uniform float pointsize;

uniform float t;
uniform vec3 Gravity = vec3(0.0, -0.05, 0.0);

out float Transp;

in vec3 position_vs;

void main() {
  float time = t + position_vs.z;

  if (time > 3.0) time = time - 3.0;

  Transp = 1.0 - time / 3.0;

  vec3 receive = vec3(position_vs.x, position_vs.y, 0.0);

  vec3 pos = receive * time + Gravity * time * time;
  vec4 p = vec4(pos, 1);

  vec4 p_mv = MV * p;
  gl_Position = P * p_mv;

  gl_PointSize = pointsize; // (-p_mv.z);
}

# fragment shader
# version 430

out vec4 color_fb;
in float Transp;

void main() {
  vec3 normal = vec3(gl_PointCoord * 2.0 - 1.0, 0);
  normal.z = 1.0 - dot(normal.xy, normal.xy);
  if (normal.z < 0) discard;

  color_fb = vec4(vec3(sqrt(normal.z)) * 0.6, Transp) + vec4(1, 1, 1, 1) * 0.5;
}